/**
 * @file  cache_block.h
 * @brief Prototypes for the class which implements a basic cache memory block.
 * @author Rafael Fao de Moura.
 * @copyright GMICRO - UFSM - 2017.
*/

#ifndef  CACHE_BLOCK_H
#define  CACHE_BLOCK_H
#include "types.h"
#include "configuration.h"
#include <stdio.h>
#include <stdlib.h>

/*Macros for data types*/
#define INSTRUCTION_BLOCK 0
#define DATA_BLOCK 1
#define CONFIGURATION_BLOCK 2

/*MESI protocol states*/
//enum MESI_state{MODIFIED,EXCLUSIVE,SHARED,INVALID};

class cache_block
{    
    public:
    
        /*VARIABLES*/
        
        //enum MESI_state MESI_current_state;/**<MESI current state*/
        uint8_t valid_bit;          /*Valid bit*/
        ADDRESS_T tag;              /**<Tag*/
        ADDRESS_T tag_and_index;    /**<Concatenation generated by the bits from tag and index(useb by write back)*/
        uint32_t lru_counter;       /**<Counter used by LRU algorigthm*/
        uint8_t data_type;          /**<Type of data stored in the block*/
        uint8_t dirty_bit;          /**<Dirty bit used for the write-back mechanism*/
        configuration* data;        /**<Pointer to data stored in the block*/       
        
        /*METHODS' PROTOTYPES*/
        
        /**
        * @fn cache_block(). 
        * @brief Standard constructor. 
        * Initializes the values of the variables as zero and pointers as NULL. 
        */        
        cache_block();
        
        /**
        * @fn cache_block(uint8_t data_type,configuration* data). 
        * @brief Second constructor. 
        * Initializes the values of the variables as zero. 
        * @param data_type Flag which indicates the data type stored.
        * @param data Pointer to data stored in the block.
        */        
        cache_block(uint8_t data_type,configuration* data);
        
        /**
        * @fn cache_block(). 
        * @brief Standard destructor. 
        * Releases the memory used by data stored. 
        */        
        ~cache_block();        
};

#endif
